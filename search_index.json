[
["index.html", "Shiny ile Dinamik Web Sitesi Oluşturma El Kitabı 1 Giriş 1.1 Amaç 1.2 Motivasyon", " Shiny ile Dinamik Web Sitesi Oluşturma El Kitabı Son Güncelleme: 06.02.2020 1 Giriş 1.1 Amaç Bu döküman, Shiny aracılığıyla dinamik ve interaktif web sitelerinin nasıl oluşturulabileceğine dair bir giriş yapılması amacıyla kaleme alınmıştır. Shiny, verilerin daha açık bir şekilde anlaşılabilmesi ve anlatılabilmesi adına direkt olarak R kodu yazarak dinamik ve interaktif web siteleri oluşturmaya yarayan bir R paketidir. Dökümanda öncelikli olarak elektrik piyasasında rol alan bireyler hedef kitle olarak alınmış olsa da Shiny kullanarak bir web sitesi oluşturmak isteyen herkes için oldukça faydalı bir döküman olduğuna inanıyoruz. 1.2 Motivasyon Bu dökümanda yer alan bütün kodlara Github hesabından ulaşabilirsiniz. Bu dökümanı başarıyla tamamlandığınızda sizlerin de Örnek Projenin Kodu ve Çalıştırma Linki kısmında gösterilen uygulamaya benzer uygulamalar yaratabileceğinize inanıyor, kolaylıklar diliyoruz. Bu örneğe dökümanı tamamladıktan sonra göz atmanızı tavsiye ediyoruz. "],
["hazırlıklar-ve-ilk-shiny-uygulaması.html", "2 Hazırlıklar ve İlk Shiny Uygulaması 2.1 Kurulum 2.2 İlk Shiny Uygulaması", " 2 Hazırlıklar ve İlk Shiny Uygulaması Bu bölümde gerekli hazırlıkların tamamlanması ve ilk Shiny uygulamasının nasıl çalıştırılacağı anlatılacaktır. 2.1 Kurulum 2.1.1 R ve RStudio’nun İndirilmesi / RStudio Cloud Öncelikle ücretsiz bir istatistiksel programlama dili olan R’ın yüklenmesi gerekiyor. R’ı indirmek için https://cran.rstudio.com/ sitesine ilerleyiniz ve işletim sisteminize uygun olan versiyonuna tıklayarak indirmeyi başlatınız. Daha sonra güçlü bir kullanıcı arayüzü olan RStudio’nun indirilmesi gerekiyor. Onun için de https://rstudio.com/products/rstudio/download/ linkini kullanabilirsiniz. İndirme tamamlandıktan sonra direktifler takip edilerek RStudio kurulumu da tamamlanmış olacaktır. Eğer bütün bu indirmeleri yapmak istemezseniz ise, yine bir RStudio ürünü olan tamamen ücretsiz ve herhangi bir indirmeye ihtiyaç duymayan çevrimiçi platform RStudio Cloud uygulamasını ziyaret edebilirsiniz. Bu işlemlerin nasıl yapılacağının anlatıldığı RStudio Cloud’da Çalışma bölümüne göz atabilirsiniz. 2.1.2 Kurulumun Test Edilmesi Kurulumlar tamamlandıktan sonra sisteminizin çalıştığından emin olmak adına RStudio’yu açın ve Konsol veya “Console” yazan yere tıklayarak basit bir kod yazın. Örneğin x = 3 + 4 yazın ve ENTER’a tıklayın. Burada x objesine bir toplama işleminin sonucu atanmış oldu. Bu objenin Environment (Ortam) penceresi altında 7 değeriyle belirdiğine dikkat ediniz. Herhangi bir hata almadığınızdan emin olduğunuzda bir sonraki bölüme geçebilirsiniz. 2.1.3 İlk R Script Dosyasının Oluşturulması Yazılan kodları ileride inceleyebilmek, üzerinde değişiklikler yapabilmek için R Script olarak adlandırılan belgeler üzerinde çalışmanız daha mantıklı olacaktır. Dikkat edeceğiniz üzere yukarıda konsola yazdığınız x &lt;- 3 + 4 komutu üzerinde bir değişiklik yapamayacaksınız. Yeni bir R Script belgesi yaratmak için ise RStudio’nun üstünde göreceğiniz panelden “File”, “New File” ve “R Script” sırasıyla seçin. İlk R belgenizin açıldığını göreceksiniz. R Script’lerde her bir satır kodu ayrı ayrı çalıştırmanız gerekiyor. Bunun için de üzerinde olduğunuz satırı çalıştırmak için Windows kullanıcısı iseniz CTRL+ENTER, MacOS kullanıyorsanız CMD+ENTER kombinasyonlarını kullanmalısınız. 2.1.4 R’da Paketler Hakkında R paketleri fonksiyonlar, hazır kodlar veya veri setleri içerebilen farklı amaçlar göz önünde bulundurularak oluşturulmuş paketlerdir. R programlama dilini ilk indirdiğinizde birçok paket beraberinde indirilmiş şekildedir ve eğer kullanmak istediğiniz paket bu paketler arasında değilse onu da indirmek ve yüklemek oldukça basittir. 2.1.5 Gerekli Paketlerin İndirilip Yüklenmesi Bu bölümde kitabın ilerleyen aşamalarında kullanılacak paketlerin indirilmesi ve yüklenmesi tamamlanacaktır. Web uygulaması oluşturmak için shiny, Daha güzel bir tablo görümüne ulaşmak için DT, Veri manipülasyonu için dplyr, Veri görselleştirmesi için ggplot2, Tarih - zaman verilerinin manipülasyonları için ise lubridate, Daha ileri seviye veri manipülasyonları için tidyr, paketleri kullanılacaktır. Paketleri indirmek için aşağıdaki kodu ilk R Script belgenizde çalıştırabilirsiniz. (İndirme ile alakalı kodları bir kere çalıştırmanız yetecektir.) R’da her bir satırı ayrı ayrı çalıştırmanız gerektiğine dikkat ediniz. (Üzerinde olduğunuz satırı çalıştırmak için Windows kullanıcısı iseniz CTRL+ENTER, MacOS kullanıyorsanız CMD+ENTER kombinasyonlarını kullanmalısınız.) İndirmeler internet bağlantınızın durumuna göre 1-5 dakika arası sürebilir. install.packages(&quot;shiny&quot;) install.packages(&quot;DT&quot;) install.packages(&quot;dplyr&quot;) install.packages(&quot;ggplot2&quot;) install.packages(&quot;lubridate&quot;) install.packages(&quot;tidyr&quot;) İndirilen paketlerin yüklenmesi için ise kullanılması gereken kod aşağıda bulunabilir. (Bu kodları ise programı her açtığınızda tekrar uygulamanız gerekmektedir.) library(shiny) library(DT) library(dplyr) library(ggplot2) library(lubridate) library(tidyr) Yüklemeler de tamamlandığında ilk Shiny uygulamanızı nasıl oluşturabileceğinizi anlatan kısma geçmeye hazırsınız. 2.2 İlk Shiny Uygulaması 2.2.1 Çevrimiçi Çalıştırma Bu kitapta kullanılacak olan bütün örnek uygulamalar açık bir Github hesabında paylaşılacak ve her bir örneğin ardından o uygulamaya kendi bilgisayarlarınızdan göz atabilmek için gereken tek satırlık R kodu da altında paylaşılacaktır. Örneğin birazdan oluşturacağımız ilk Shiny uygulamasına göz atmak için aşağıdaki kodu çalıştırabilirsiniz. runGitHub(&quot;R-shiny&quot;, &quot;acikenerji&quot;, subdir = &quot;docs/barandogru_shinyBookExamples/first_shiny&quot;) Burada kullanılan runGithub() fonksiyonu shiny paketinin içinde gelen bir fonksiyondur. O nedenle çalışmaya başlamadan önce library(shiny) komutunu çalıştırdığınızdan emin olunuz. Bu aşamaya kadar her şeyi doğru yaptıysanız karşınıza şu şekilde bir uygulama çıkacaktır. Şimdi ise bu uygulamayı sizin nasıl yaratabileceğinizi anlatalım. 2.2.2 İlk Shiny Uygulamasının Oluşturulması Yukarıda çalıştırdığınız uygulama, ilk R Shiny belgenizi oluşturduğunuzda karşınıza çıkan örnek bir şablon ve bu kısımda bu şablonu nasıl yaratabileceğinizi adım adım anlatacağız. Sonraki bölümlerde ise sıfırdan bir Shiny uygulamasını nasıl oluşturabileceğinizi ve uygulamanın genel hatlarını örnekler üzerinden göstereceğiz. Bilgisayarınızda RStudio’yu açın. “File” -&gt; “New File” -&gt; “Shiny Web App” adımlarını uygulayın. Karşınıza çıkan ekranda oluşturmak istediğiniz belgenin ismini ve çalışma dizinini belirleyin. (Burada belge seçeneklerinden “Single File (app.r)” seçeneğini seçmelisiniz.) Oluşturulan belgenin sağ üst kısmında yeşil renkli okla belirtilen “Run App” butonuna tıklayın. İlk uygulamanızı çalıştırmış oldunuz :) Bir sonraki bölümde bir Shiny uygulamasının genel hatları ve kullanışlı fonksiyonları adım adım örneklerle anlatılacaktır. "],
["shiny-uygulamasına-genel-bakış.html", "3 Shiny Uygulamasına Genel Bakış 3.1 Shiny Uygulamasının En Basit Hali 3.2 Shiny Uygulamasının Genel Hatları", " 3 Shiny Uygulamasına Genel Bakış Bu bölümde bir Shiny uygulamasının genel hatları ve önemli fonksiyonları detaylı şekilde anlatılacaktır. Her bir adımda gösterilen uygulamanın kodları paylaşılacak ve kullanılan yeni fonksiyonlar açıklanacaktır. Aynı zamanda uygulamaları çevrimiçi görüntüleyebilmeniz için de tek satırlık kodlar paylaşılacaktır. 3.1 Shiny Uygulamasının En Basit Hali Uygulamanın açıklanmasına geçmeden önce uygulamaya göz atmanızı tavsiye ediyoruz. Uygulamayı çalıştırmak için aşağıdaki kodu çalıştırabilirsiniz. (library(shiny) komutunu bu aşamadan önce çalıştırdığınızdan emin olun.) runGitHub(&quot;R-shiny&quot;, &quot;acikenerji&quot;, subdir = &quot;docs/barandogru_shinyBookExamples/almost_empty&quot;) Karşınıza şu şeklide bir uygulama çıkmalı. Şimdi ise daha önce İlk Shiny Uygulamasının Oluşturulması bölümünde anlattığımız şekilde yeni bir app.R belgesi oluşturun ve belgenin içini boşaltıp aşağıdaki kodu yapıştırdıktan sonra sağ üst kısımdan “Run App” butonuna tıklayın. library(shiny) # Kullanıcı arayüzünün tanımlanması ui &lt;- fluidPage( # Uygulama başlığının girilmesi titlePanel(&quot;İlk Uygulama&quot;), # Kenar çubuğunun tanımlanması sidebarLayout( sidebarPanel((&quot;İlk kenar çubuğu&quot;) ), # Ana panonun tanımlanması mainPanel((&quot;İlk ana pano&quot;) ) ) ) # Arka planda işlemleri uygulayan &quot;server&quot;ın tanımlanması server &lt;- function(input, output) { } # Uygulamanın çalıştırılması shinyApp(ui = ui, server = server) Aynı uygulamayı çalıştırdığınızı göreceksiniz. Bu uygulama bir Shiny uygulamasının alabileceği en basit hal. Burada yapılan işlemleri açıklayacak olursak, Öncelikle library(shiny) komutu ile Shiny paketi yükleniyor. Sonra uygulama içerisinde ui ve server adında iki objenin içinde belirli özellikler tanımlanıyor. (Bu objeler ve tanımlanan özellikler ileride daha detaylı anlatılacaktır.) En sonda da “Run App” butonuna tıkladığınızda uygulamanın çalışmasını sağlayan shinyApp(ui = ui, server = server) komutu çalıştırılıyor. Şimdi bir Shiny uygulamasının genel hatlarını inceleyelim. 3.2 Shiny Uygulamasının Genel Hatları Shiny uygulaması temel olarak ui yani kullanıcının karşısına çıkan kullanıcı arayüzü (“User Interface”) ve server yani programın arka planında işlemleri gerçekleştiren kısımlarından oluşur. ui kısmı kullanıcının uygulamayı açtığında karşısına çıkan her şey, server kısmı ise arka planda yapılan bütün operasyonların merkezi olarak adlandırılabilir. Bir Shiny uygulaması temel olarak 3 kısımdan oluşur. Bu üç kısımın iletişimleri ise temel olarak şu şekildedir. “Yan Panel” kullanıcı girdilerinin (input) alındığı kısımdır. Oluşturulacak interaktif web sitesi için kullanıcıların seçimler yaptığı ya da metinler / sayılar girdiği bölümdür. Alınan bu inputlar sonrasında ise “Ana Panel”de gösterilecek olan çıktıyı (output) oluşturmak üzere “Server” fonksiyonuna gönderilirler. Yani özetle iletişimde aşağıdaki sıra izlenir. \\[ Yan Panel (Sidebar Panel) -&gt; Server -&gt; Ana Panel (Main Panel) \\] Kullanıcı karşısına çıkan bir Shiny uygulaması ise “Yan Panel”, “Ana Panel” ve “Başlık Panel”inden oluşur. Bu düzen aşağıdaki ekran görüntüsünde daha rahat görülebilir. “Server” kısmının kullanıcı arayüzünde direkt bir karşılığı yoktur. Şimdi ise bu iletişimlerin sürdürülmesini sağlayan kısımları ve kodları inceleyelim. 3.2.1 Yan Panel Yan Panel’de tanımlanabilecek çok sayıda girdi (input) çeşidi vardır. Bu input çeşitlerinden bir kısmını kullanılan fonksiyon isimleri ile birlikte sıralayacak olursak, Onay kutucukları koymak için checkboxGroupInput() fonksiyonu, Tarih girdisi için dateInput() ve tarih aralığı girdisi için dateRangeInput() fonksiyonu, Belirli opsiyonların açılan bir listede sıralanması için selectInput() fonksiyonu, Kaydırma çubuğuyla girdi almak için sliderInput(), Bir yazı girdisi almak için ise textInput() fonksiyonları kullanılabilir. Daha fazla input fonksiyonu için shiny Cheatsheet dökümanına göz atabilirsiniz. Şimdi bu fonksiyonların örneklendirildiği uygulamayı çalıştırmak için aşağıdaki kodu çalıştırabilirsiniz. runGitHub(&quot;R-shiny&quot;, &quot;acikenerji&quot;, subdir = &quot;docs/barandogru_shinyBookExamples/just_input&quot;) Karşınıza şu şekilde bir uygulama çıkacak, Bu uygulamanın R kodu ise aşağıdaki gibi, library(shiny) # Kullanıcı arayüzünün tanımlanması ui &lt;- fluidPage( # Uygulama başlığının girilmesi titlePanel(&quot;İlk Uygulama&quot;), # Kenar çubuğunun tanımlanması sidebarLayout( sidebarPanel((&quot;İlk Yan Panel&quot;), checkboxGroupInput(inputId = &quot;kutucuk&quot;, label = &quot;İstediğiniz kutucuğu şeçiniz.&quot;, choices = c(&quot;Seçenek1&quot;, &quot;Seçenek2&quot;)), dateInput(inputId = &quot;tarih&quot;, label = &quot;İstediğiniz tarihi seçiniz.&quot;, min = &quot;2019-01-01&quot;, max = &quot;2019-12-31&quot;, value = &quot;2019-01-01&quot;, format=&quot;dd/mm/yyyy&quot;, language=&quot;tr&quot;, weekstart=1), selectInput(inputId = &quot;menü&quot;, label = &quot;İstediğiniz seçimi yapınız.&quot;, choices = c(&quot;Seçenek1&quot;, &quot;Seçenek2&quot;)), sliderInput(inputId = &quot;kaydırmaCubugu&quot;, label = &quot;Aşağıdaki çubuğu kullanarak seçiminizi yapınız.&quot;, min = 0, max = 30, value = 15), textInput(inputId = &quot;yazı&quot;, label = &quot;Metin giriniz.&quot;, placeholder = &quot;Buraya Metin&quot;) ), # Ana panonun tanımlanması mainPanel((&quot;İlk Ana Panel&quot;) ) ) ) # Arka planda işlemleri uygulayan &quot;server&quot;ın tanımlanması server &lt;- function(input, output) { } # Uygulamanın çalıştırılması shinyApp(ui = ui, server = server) Şimdi bu kodun üzerinden beraber geçelim. Fark edilebileceği üzere Shiny Uygulamasının En Basit Hali bölümünden farklı olan tek kısım sidebarPanel() fonksiyonu, bu nedenle de uygulamanın herhangi bir çıktısı olmaması oldukça normal. Bu input fonksiyonlarının tamamının ortak iki parametresi var, inputId ve label. inputId parametresi alınan inputun daha sonra “Server” kısmında kullanılabilmesi için o inputa yalnızca kodun bildiği bir isim vermek, label parametresi ise kullanıcının karşısına çıkan mesajın oluşturulmasından sorumludur. Bu iki parametre dışında, checkboxGroupInput() ve selectInput() input fonksiyonlarının choices adlı ortak bir parametreleri vardır. Bu parametre kullanıcının karşısına çıkacak seçeneklerin belirlenmesini sağlar. dateInput() fonksiyonunun ise min, max, value, format, language, format, weekstart gibi birçok parametresini görüyoruz. Bu parametreler sırasıyla minimum değerin belirlenmesi, maksimum değerin belirlenmesi, başlangıç değerinin belirlenmesi, gösterilecek tarihin dilinin seçilmesi, gösterilecek tarihin formatının belirlenmesi ve gösterilecek tarihte haftanın ilk gününün hangi gün olacağının belirlenmesinden sorumludur. sliderInput() fonksiyonunun min, max ve value olmak üzere 3 daha parametresini görüyoruz. Bu parametreler sırasıyla kaydırma çubuğunun minimum, maksimum ve başlangıç değerlerini belirlememizi sağlar. textInput() fonksiyonunun ise ek olarak placeholder adında bir parametresini görüyoruz, bu parametre kullanıcı herhangi bir metin girmeden önce metin kutusunda yer alan “Yer Tutucu” metin olarak tanımlanabilir. Bu fonksiyonların yukarıda bahsedilen parametreler dışında da pek çok parametresi olduğuna dikkat edilmelidir. Bu parametreler için shiny Cheatsheet dökümanına göz atabilirsiniz. Şimdi ise bu inputların “Server” fonksiyonunda gerekli işlemlerden geçerek “Ana Panel”de nasıl yansıtıldığını inceleyelim. “Server” ve “Ana Panel” kısımları birbiriyle oldukça bağlantılı olduğundan bu kısımlar birlikte ele alınacaktır. 3.2.2 Server ve Ana Panel Ana panelde birçok farklı çıktı formatı sergilenebilir. Bu farklı opsiyonlardan bahsetmeden önce “input”larla bu iki kısım arasındaki bağlantının nasıl çalıştığını incelemek adına örnek uygulamayı aşağıdaki kod yardımıyla çalıştırın. runGitHub(&quot;R-shiny&quot;, &quot;acikenerji&quot;, subdir = &quot;docs/barandogru_shinyBookExamples/input_output&quot;) Karşınıza şu şekilde bir uygulama çıkacak. Siz de kendi bilgilerinizi girerek uygulamanın farklı çıktılar verdiğini gözlemleyebilirsiniz. Şimdi ise bu uygulamanın koduna bakalım. library(shiny) # Kullanıcı arayüzünün tanımlanması ui &lt;- fluidPage( # Uygulama başlığının girilmesi titlePanel(&quot;Merhabalar,&quot;), # Kenar çubuğunun tanımlanması sidebarLayout( sidebarPanel((&quot;Lütfen bilgilerinizi giriniz. &quot;), textInput(inputId = &quot;yazı&quot;, label = &quot;Adınızı giriniz.&quot;, placeholder = &quot;Adınız&quot;), dateInput(inputId = &quot;tarih&quot;, label = &quot;Doğum tarihinizi seçiniz.&quot;, min = &quot;1975-01-01&quot;, max = &quot;2019-12-31&quot;, value = &quot;1975-01-01&quot;, format=&quot;dd/mm/yyyy&quot;, language=&quot;tr&quot;, weekstart=1), selectInput(inputId = &quot;kutucuk&quot;, label = &quot;Cinsiyetinizi seçiniz.&quot;, choices = c(&quot;Kadın&quot;, &quot;Erkek&quot;, &quot;Diğer&quot;), selected = NULL), sliderInput(inputId = &quot;kaydırmaCubugu&quot;, label = &quot;Boyunuzu seçiniz. (cm)&quot;, min = 100, max = 250, value = 150) ), # Ana panonun tanımlanması mainPanel((&quot;Bilgileriniz şu şekilde: &quot;), textOutput(&quot;text1&quot;), textOutput(&quot;text2&quot;), textOutput(&quot;text3&quot;), textOutput(&quot;text4&quot;) ) ) ) # Arka planda işlemleri uygulayan &quot;server&quot;ın tanımlanması server &lt;- function(input, output) { output$text1 &lt;- renderText(paste(&quot;Selam &quot;,as.character(input$yazı), &quot; :)&quot;)) output$text2 &lt;- renderText(paste(&quot;Doğum Tarihiniz: &quot;,as.character(input$tarih))) output$text3 &lt;- renderText(paste(&quot;Cinsiyetiniz: &quot;,as.character(input$kutucuk))) output$text4 &lt;- renderText(paste(&quot;Boyunuz: &quot;,as.character(input$kaydırmaCubugu), &quot; cm&quot;)) } # Uygulamanın çalıştırılması shinyApp(ui = ui, server = server) Burada bir daha “sidebarPanel” kısmındaki input alma süreci anlatılmayacaktır. “Input”lar alındıktan sonra “Server” içinde farklı render fonksiyonları ile (Bu örnekte yalnızca renderText fonksiyonu kullanılmıştır.) çağrılırlar. Bu çağrılma sırasında $ operatörü ve daha önce “Input” kısmında inputId parametresine verilen isim kullanılır. Daha sonra bunlar kullanıcının seçeceği farklı isimdeki “output” değişkenlerine eşitlenirler. En sonda ise, bu “output” değişkenleri farklı output fonksiyonları (Bu örnekte yalnızca textOutput fonksiyonu kullanılmıştır.) içinde çağrılarak “Ana Panel”de gösterilmeleri sağlanır. Buradaki çağırma sırasında ise output fonksiyonu ile kullanılan $ operatörü sonrasında belirlenen isim kullanılır. Temel olarak bir Shiny uygulamasının akışı şu şekilde ifade edilebilir. \\[ Input -&gt; Render -&gt; Output \\] Şimdi ise farklı render fonksiyonlarını ve onlarla bağlantılı olan output fonksiyonlarını aşağıda inceleyelim. render fonksiyonları output fonksiyonları renderText() textOutput() renderPrint() verbatimTextOutput() renderPlot() plotOutput() renderImage() imageOutput() renderTable() tableOutput() Bu fonksiyonlar ve daha fazlası hakkında daha detaylı bilgi için shiny Cheatsheet dökümanına göz atabilirsiniz. Shiny uygulamaları kullanıcının hayal gücü ve istekleri doğrultusunda şekillenmektedir ve çok kompleks uygulamalar oluşturmak da mümkündür. Bu dökümanda temel bir giriş yapılması hedeflenmiş, bundan sonrası kullanıcıya bırakılmıştır. Herhangi bir sorunuz olması durumunda kitabın yazarlarına Yazarlar Hakkında kısmında belirtilen iletişim bilgisinden ulaşabilirsiniz. "],
["ekler.html", "Ekler Yazarlar Hakkında RStudio Cloud’da Çalışma Örnek Projenin Kodu ve Çalıştırma Linki", " Ekler Yazarlar Hakkında Baran Doğru Baran Doğru, Boğaziçi Üniversitesi Endüstri Mühendisliği öğrencisidir. Veri bilimine büyük ilgi duyan Baran Doğru Algopoly’de staj yaptığı dönemde bu dökumanın oluşturulmasında büyük pay sahibi olmuştur. Kendisine ulaşmak için LinkedIn hesabını ziyaret edebilirsiniz. RStudio Cloud’da Çalışma RStudio Cloud, R ve RStudio’yu bilgisayarınıza indirmeden çevrimiçi olarak kodlarınızı yazabileceğiniz, çalışmalarınızı is arkadaşlarınızla rahatça paylaşabileceğiniz, gerekli paketleri bilgisayarınıza yükleyip yüklemediğinizi dert etmeyeceğiniz tamamen ücretsiz bir platformdur. RStudio Cloud’a erişmek ve platformu kullanmak için aşağıdaki adımları izleyebilirsiniz. Tercih ettiğiniz web tarayıcıda “RStudio Cloud” yazarak aratılınca karşınıza çıkan ilk linke tıkladığınızda bu ekranla karşılaşacaksınız. Ana ekranın sağ üst köşesindeki “Sign Up” butonuna tıklayarak kayıt ekranına ulaşın. Karşınıza çıkan kayıt formunu doldurun. Kaydınızı tamamlayın ve hesabınıza giriş yapın. Artık RStudio Cloud’u kullanmaya hazırsınız. İlk projenizi oluşturmak için “New Project” butonuna tıklayın. Açılan ilk projenize R Script dosyası eklemek için ise üstteki bardan “File”, “New File” ve “R Script” sırasıyla seçin. Artık R’da kod yazmaya hazırsınız. Örnek Projenin Kodu ve Çalıştırma Linki Bu aşamada Motivasyon kısmında gösterilen uygulamanın kodu ve çalıştırma linki paylaşılacaktır. Bu örnek bu kitapta anlatılan seviyenin biraz üstünde olabilir, herhangi bir soru durumunda yazarlara ulaşmak için Yazarlar Hakkında bölümünde verilen iletişim bilgisi kullanılabilir. Uygulamayı bilgisayarınızda çalıştırmak için aşağıdaki kodu çalıştırabilirsiniz, runGitHub(&quot;R-shiny&quot;, &quot;acikenerji&quot;, subdir = &quot;docs/barandogru_shinyBookExamples/final_project&quot;) Uygulamanın kodu ise aşağıdaki gibidir, # gerekli paketlerin yüklenmesi library(shiny) library(dplyr) library(tidyr) library(ggplot2) library(lubridate) library(DT) # verinin indirilmesi ptfsmf &lt;- readRDS(url(&quot;https://github.com/acikenerji/verianalizi101/blob/master/duzenlenmis_ptfsmf.rds?raw=true&quot;)) # Kullanıcı arayüzünün tanımlanması ui &lt;- fluidPage( # Uygulama başlığının girilmesi titlePanel(&quot;2019 YILI PİYASA TAKAS FİYATI - SİSTEM MARJİNAL FİYATI VERİSİ&quot;), # Kenar çubuğunun tanımlanması sidebarLayout( sidebarPanel( (title = &quot;İncelemek istediğiniz veriyi ve tarihi seçiniz.&quot;), selectInput(&quot;variableIn&quot;, &quot;1. İncelemek istediğiniz değişkeni seçiniz.&quot; , choices=c(&quot;Hepsi&quot;, &quot;PTF&quot;, &quot;SMF&quot;), selected=&quot;Hepsi&quot;), dateRangeInput(&quot;dateIn&quot;, &quot;2. İncelemek istediğiniz tarih aralığını seçiniz.&quot;, start=min(ptfsmf$Tarih), end=max(ptfsmf$Tarih), min=min(ptfsmf$Tarih), max=max(ptfsmf$Tarih), format=&quot;dd/mm/yyyy&quot;, separator=&quot;ve&quot;, language=&quot;tr&quot;, weekstart=1), p(&quot;Kullanılan veri &quot;, tags$a(href = &quot;https://rapor.epias.com.tr/rapor/xhtml/ptfSmfListeleme.xhtml&quot;, &quot;EPİAŞ Raporlama Sayfası&#39;ndan&quot;, target = &quot;_blank&quot;), &quot; sayfasından alınmıştır.&quot;), p(&quot;Bu app Boğaziçi Üniversitesi Endüstri Mühendisliği öğrencisi&quot;, strong(&quot;Baran Doğru&quot;), &quot;tarafından hazırlanmıştır.&quot;, &quot;Kendisine&quot;, tags$a(href = &quot;https://www.linkedin.com/in/barandogru&quot;, &quot;LinkedIn&quot;, target = &quot;_blank&quot;), &quot;hesabından ulaşabilirsiniz.&quot;) ), # Ana panonun tanımlanması mainPanel( tabsetPanel(type = &quot;tab&quot;, tabPanel(&quot;Grafik&quot;, plotOutput(&quot;plot1&quot;)), tabPanel(&quot;Veri Seti Özeti&quot;, verbatimTextOutput(&quot;summary&quot;)), tabPanel(title = &quot;Ham Veri&quot;, dataTableOutput(&quot;data&quot;, height = &quot;500px&quot;)) ), ) ) ) # Arka planda işlemleri uygulayan &quot;server&quot;ın tanımlanması server &lt;- function(input, output) { # grafik çıktısının tanımlanması output$plot1 &lt;- renderPlot({ # verinin grafik icin düzenlenmesi ptfsmf &lt;- ptfsmf %&gt;% mutate(Saat = hour(Tarih), Tarih = as.Date(Tarih)) %&gt;% pivot_longer(cols = PTF:SMF, names_to = &quot;Degisken&quot;, values_to = &quot;Fiyat&quot;) pl_df &lt;- ptfsmf %&gt;% filter(Tarih &gt;= input$dateIn[1] &amp; Tarih &lt;= input$dateIn[2]) %&gt;% group_by(Degisken, Saat) %&gt;% summarise(Fiyat = mean(Fiyat)) if(input$variableIn != &quot;Hepsi&quot;){ pl_df &lt;- pl_df %&gt;% filter(Degisken == input$variableIn) ggplot(pl_df, aes(x=Saat, y=Fiyat, color=Degisken)) + geom_line() + theme_minimal() + scale_x_discrete(limits=c(0:23)) + labs(title = &quot;Saatlere Göre Fiyatlar - Çizgi Grafiği&quot;) + theme(axis.text.x = element_text(angle = 45), legend.position = &quot;bottom&quot;, legend.title = element_blank()) } else{ ggplot(pl_df, aes(x=Saat, y=Fiyat, color=Degisken)) + geom_line() + theme_minimal() + scale_x_discrete(limits=c(0:23)) + labs(title = &quot;Saatlere Göre Fiyatlar - Çizgi Grafiği&quot;) + theme(axis.text.x = element_text(angle = 45), legend.position = &quot;bottom&quot;, legend.title = element_blank()) } }) # tablo çıktısının tanımlanması output$data &lt;- renderDataTable({ ptfsmf$Tarih &lt;- as.character(ptfsmf$Tarih) ptfsmf &lt;- ptfsmf %&gt;% filter(Tarih &gt;= input$dateIn[1] &amp; Tarih &lt;= input$dateIn[2]) %&gt;% select(Tarih, PTF, SMF) if(input$variableIn != &quot;Hepsi&quot;){ ptfsmf &lt;- ptfsmf %&gt;% select(Tarih, input$variableIn) datatable(ptfsmf) } else datatable(ptfsmf) }) # özet çıktısının tanımlanması output$summary &lt;- renderPrint({ ptfsmf &lt;- ptfsmf %&gt;% mutate(Tarih_temp = as.Date(Tarih)) %&gt;% filter(Tarih_temp &gt;= input$dateIn[1] &amp; Tarih_temp &lt;= input$dateIn[2]) %&gt;% select(-c(Tarih_temp, NDF, PDF)) if(input$variableIn != &quot;Hepsi&quot;){ ptfsmf &lt;- ptfsmf %&gt;% select(Tarih, input$variableIn) summary(ptfsmf) } else summary(ptfsmf) }) } # Uygulamanın çalıştırılması shinyApp(ui = ui, server = server) "]
]
